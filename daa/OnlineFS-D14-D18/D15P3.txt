/*
Balbir singh is working with Binary Trees.
The elements of the tree is given in the level order format.
In the tree, a path from root node to leaf node represents a binary number
starting with the most significant bit.

You will be given the root of the binary tree wth node values as 0 or 1.
Your task is to help the Balbir singh to find the sum of all binary numbers 
in the binary tree.

Your task is to implement the class Solution:
	- public int sumOfBinaryNums(BinaryTreeNode root):
      return an integer value.
	
NOTE: 
Please do consider the node with data as '-1' as null in the given tree.

Input Format:
-------------
Space separated integers, elements of the tree either 0  1 and -1(null).

Output Format:
--------------
Print an integer value.


Sample Input-1:
---------------
1 1 0 1 0 1 0 1 1

Sample Output-1:
----------------
45

Explnation:
-----------
The binary numbers are : 
1111 + 1111 + 110 + 101 + 100 => 15+15+6+5+4 = 45

Sample Input-2:
---------------
1 1 0 0 -1 -1 1

Sample Output-2:
----------------
11

Explnation:
-----------
The binary numbers are : 
110 + 101 => 6+5 = 11


=== testcases ===
case =1
input =1 1 0 1 0 1 0 1 1
output =45

case =2
input =1 1 0 0 -1 -1 1
output =11

case =3
input =1 0 1 0 0 -1 1 1 -1 0 1 1 -1 -1 -1 1 1
output =55

case =4
input =1 0 1 0 0 -1 1 1 1 0 1 1 -1 -1 -1 1 1 1 1 0 1 1 1 0
output =147

case =5
input =1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
output =591

case =6
input =1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
output =1696

case =7
input =1 1 1 0 0 1 1 1 -1 -1 -1 -1 -1 -1 0 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 1   
output =84

case =8
input =1 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 1
output =314


*/

import java.util.*;

class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}

public class BinaryTree{
	static BinaryTreeNode root;
	static BinaryTreeNode temp = root;
	void insert(BinaryTreeNode temp, int key)
    {
 
        if (temp == null) {
            root = new BinaryTreeNode(key);
            return;
        }
        Queue<BinaryTreeNode> q = new LinkedList<BinaryTreeNode>();
        q.add(temp);
 
        // Do level order traversal until we find
        // an empty place.
        while (!q.isEmpty()) {
            temp = q.peek();
            q.remove();
 
            if (temp.left == null) {
                temp.left = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.left);
 
            if (temp.right == null) {
                temp.right = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.right);
        }
    }
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String str[]=sc.nextLine().split(" ");
		BinaryTree bt=new BinaryTree();
		root=new BinaryTreeNode(Integer.parseInt(str[0]));
		for(int i=1; i<str.length; i++)
			bt.insert(root,Integer.parseInt(str[i]));
		Solution sol= new Solution();
		System.out.println(sol.sumOfBinaryNums(root));
	}
}

class Solution{
    public int sumOfBinaryNums(BinaryTreeNode root){
        return dfs(root, 0);
    }

    public int dfs(BinaryTreeNode root, int data) {
        if (root == null || root.data==-1) return 0;
        data = data * 2 + root.data;
        return root.left == root.right ? data : dfs(root.left, data) + dfs(root.right, data);
    }
}
