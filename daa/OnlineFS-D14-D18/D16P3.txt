/*
A triplet is a subsequence of list of elements.
and length of the subsequence should be 3.
 i.e., List is [1,2,3,4,5,6], triplets possible are
[1,2,3], [1,2,4], [1,2,5], [1,2,6] and so on.
 
Ganesh is given a list of integers, nums[], and three integers x,y,z.
He need to findout the triplets(nums[i],nums[j],nums[k]),
which are following the conditions given below:
	* 0 <= i < j < k < nums.length
	* abs(nums[i] - nums[j]) <= x
	* abs(nums[j] - nums[k]) <= y
	* abs(nums[i] - nums[k]) <= z

Your task is to help Ganesh to find the number of such triplets possible.

Input Format:
-------------
Line-1: Four space separated integers, N, x, y, z.
Line-2: N space separated integers, nums[].

Output Format:
--------------
Print an integer, number of triplets.


Sample Input-1:
---------------
6 7 2 3
3 0 1 1 9 7

Sample Output-1:
----------------
4

Explanation:
------------
There are 4 triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].
Satisfying given conditions


Sample Input-2:
---------------
5 0 0 1
1 1 2 2 3

Sample Output-2:
----------------
0

Explanation:
------------
There is no triplet, which satisfy the given conditions.


=== testcases ===

case =1
input =6 7 2 3
3 0 1 1 9 7
output =4

case =2
input =5 0 0 1
1 1 2 2 3
output =0

case =3
input =10 1 2 3
3 8 9 2 6 7 5 1 0 4
output =8

case =4
input =15 2 1 4
8 7 9 3 1 11 23 21 12 14 6 15 19 25 7
output =6

case =5
input =25 3 2 3
8 7 9 3 1 11 23 21 7 3 8 9 2 6 7 5 1 0 4 12 14 6 15 19 25
output =143

case =6
input =30 3 2 4
8 7 9 3 1 11 23 21 7 3 14 17 8 9 2 6 23 7 5 29 1 10 0 4 12 14 6 15 19 25
output =194

case =7
input =30 5 1 3
8 7 9 3 1 11 23 21 7 3 14 17 8 9 2 6 23 7 5 29 1 10 0 4 12 14 6 15 19 25
output =114

case =8
input =50 2 4 1
8 7 9 3 1 11 23 21 7 3 14 17 8 9 2 6 23 7 5 29 1 10 0 4 12 14 6 15 19 25 11 23 21 7 3 14 17 8 9 2 29 1 10 4 12 14 6 15 19 25
output =408

*/
import java.util.*;

class CountTriplets {
	public int countTriplets(int[] nums, int x, int y, int z) {
		int count = 0;
		int n = nums.length;
		for(int i = 0; i <n-2; i++) {
			for(int j = i+1; j <n-1; j++) {
				if(Math.abs(nums[i]-nums[j])>x) continue;
				for(int k=j+1; k<n; k++) {
					if(Math.abs(nums[j]-nums[k])<=y && Math.abs(nums[k]-nums[i])<= z)
						count++;
				}
			}
		}
		return count;
	}

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int x=sc.nextInt();
		int y=sc.nextInt();
		int z=sc.nextInt();
		int nums[]=new int[n];
		for(int i=0;i<n;i++)
			nums[i]=sc.nextInt();
		System.out.println(new CountTriplets().countTriplets(nums,x,y,z));
	}
}