/*
There are two teams Titans and Warriors with same N number of players.
Both the teams have same set of jersey numbers for their players.

Both the teams stand in two lines opposite to each other from index 0...N-1.
Players from Team-Titans  in line-1 and Team-Warriors in line-2.

You have to find an index mapping M[], from Titans to Warriors. 
A mapping M[i] = j, means the jersey number of player[i] in Titans team appears 
in Warriors team at index j.

The teams Titans and Warriors may contain duplicate jersey numbers.
Your task is to return, lexicographically smallest order.

Input Format:
-------------
Line-1: An integer N, number of players in each team.
Line-2: N space separated integers, T[] jersey numbers of Titans team
Line-3: N space separated integers, W[] jersey numbers of Warriors team

Output Format:
--------------
Print the mapping array.


Sample Input-1:
---------------
6
32 41 51 15 21 10
10 51 41 21 32 15

Sample Output-1:
----------------
4 2 1 5 3 0

Explanation:
------------
Indices ->  0  1  2  3  4  5
Titans ->   32 41 51 15 21 10
Warriors -> 10 51 41 21 32 15

So, the mapping of jersey numnbers is: 
M[0]=4, M[1]=2, M[2]=1, M[3]=5, M[4]=3, M[5]=0


Sample Input-2:
---------------
5
10 10 20 20 20
20 10 20 10 20

Sample Output-2:
----------------
1 3 0 2 4


=== testcases ===
case =1
input =5
12 28 46 32 50
50 12 32 46 28
output =1 4 3 2 0

case =2
input =5
10 10 20 20 20
20 10 20 10 20
output =1 3 0 2 4

case =3
input =8
1 2 3 4 5 6 7 8
8 5 6 3 7 2 4 1
output =7 5 3 6 1 2 4 0

case =4
input =10
71 53 56 80 74 14 2 14 80 16
2 16 14 80 56 80 14 71 53 74
output =7 8 4 3 9 2 0 6 5 1

case =5
input =15
50 78 73 7 67 12 85 98 6 47 94 33 10 51 11
33 10 78 85 98 6 47 51 73 7 12 50 11 94 67
output =11 2 8 9 14 10 3 4 5 6 13 0 1 7 12

case =6
input =20
12 78 37 46 88 90 90 54 71 39 10 43 98 37 93 67 81 91 42 44
37 10 43 98 44 46 88 12 93 67 81 90 90 91 78 42 54 71 39 37
output =7 14 0 5 6 11 12 16 17 18 1 2 3 19 8 9 10 13 15 4

case =7
input =10
45 74 59 97 42 50 34 100 40 49
42 50 40 34 59 49 97 45 74 100
output =7 8 4 6 0 1 3 9 2 5

case =8
input =15
3 2 17 8 17 9 2 8 10 14 20 3 19 9 15
17 9 3 19 9 2 14 15 20 17 2 3 8 8 10
output =2 5 0 12 9 1 10 13 14 6 8 11 3 4 7


*/
import java.util.*;

class Anagrams {
	 public int[] anagramMappings(int[] A, int[] B) {
		int n = A.length;
		for(int i = 0; i < n; i++) {
			A[i] = (A[i] << 8) + i;
			B[i] = (B[i] << 8) + i;
		}
		Arrays.sort(A);
		Arrays.sort(B);
		int[] ans = new int[n];
		for(int i = 0; i < n; i++)
			ans[A[i] & 0xFF] = B[i] & 0xFF;
		return ans;
	}

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] A=new int[n];
		int[] B=new int[n];
		
		for(int i=0;i<n;i++)
			A[i]=sc.nextInt();
		
		for(int i=0;i<n;i++)
			B[i]=sc.nextInt();
		
		int result[]=new int[n];
		result=new Anagrams().anagramMappings(A, B);
		
		for(int i=0;i<result.length;i++)
			System.out.print(result[i]+" ");
	}
}