/*
Ram and Bheem are working on the singly linked list concept.
They have chosen a number each, num1 and num2.

If the number is 432, then the linked list is created as 2->3->4.

Your task is to help Mr Ram and Bheem to find the addition of num1 and num2.
And display the result as shown in sample testcases.

Input Format:
-------------
Line-1: two space separated integers, N and M, length of num1 and num2.
Line-2: N space separated integers, digits of the num1, from end to start.
Line-3: M space separated integers, digits of the num2, from end to start.

Output Format:
--------------
Print the digits of the addition result.

NOTE:
-----
You may assume the num1, num2, do not contain any leading zero, 
except the value of num1/num2 is 0 itself.
i.e., the list do not conatin any trailing zero.


Sample Input-1:
---------------
3 3
1 2 3
4 5 6

Sample Output-1:
----------------
5 7 9

Explanation:
------------
Original numbers are num1=321 and num2=654
Addition is 321+654= 975 => the output is 5 7 9.


Sample Input-2:
---------------
4 3
4 3 5 6
8 7 6

Sample Output-2:
----------------
2 1 2 7

Explanation:
------------
Original numbers are num1=6534 and num2=678
Addition is 6534+678= 7212 => the output is 2 1 2 7.


=== testcases ===
case =1
input =4 3
4 3 5 6
8 7 6
output =2 1 2 7

case =2
input =6 3
9 9 9 9 9 9
9 9 9
output =8 9 9 0 0 0 1

case =3
input =6 5
8 5 3 9 7 9
7 8 4 6 9
output =5 4 8 5 7 0 1

case =4
input =10 7
9 4 6 7 4 5 6 3 4 7
8 4 3 2 8 9 4
output =7 9 9 9 2 5 1 4 4 7

case =5
input =16 12
9 4 6 7 4 5 6 3 4 7 8 5 3 9 7 9
8 4 3 2 8 9 4 7 8 4 6 9
output =7 9 9 9 2 5 1 1 3 2 5 5 4 9 7 9

case =6
input =6 7
7 0 0 0 8 7
0 0 0 8 7 8 6
output =7 0 0 8 5 6 7


*/

import java.util.*;

class Node{    
	int data;    
	Node next;    
		
	public Node(int data) {    
		this.data = data;    
		this.next = null;    
	}    
}    

class Solution{
    public Node addTwoNumbers(Node l1, Node l2) {
        Node prev = new Node(0);
        Node head = prev;
        int carry = 0;
        while (l1 != null || l2 != null || carry != 0) {
            Node cur = new Node(0);
            int sum = ((l2 == null) ? 0 : l2.data) + ((l1 == null) ? 0 : l1.data) + carry;
            cur.data = sum % 10;
            carry = sum / 10;
            prev.next = cur;
            prev = cur;
            
            l1 = (l1 == null) ? l1 : l1.next;
            l2 = (l2 == null) ? l2 : l2.next;
        }
        return head.next;
    } 
}
public class AddNumbers {    

    public Node head = null;    
    public Node tail = null;    
        
    public void addNode(int data) {    
        Node newNode = new Node(data);    
        if(head == null) {    
            head = newNode;    
            tail = newNode;    
        }    
        else {    
           tail.next = newNode;    
            tail = newNode;    
        }    
    }    
        
    public void display() {    
        Node current = head;    
            
        if(head == null) {    
            System.out.println("List is empty");    
            return;    
        }    
        while(current != null) {    
            System.out.print(current.data + " ");    
            current = current.next;    
        }    
        System.out.println();    
    }    
    public static void main(String[] args) {    
        Scanner sc=new Scanner(System.in);
        AddNumbers list1 = new AddNumbers(); 
        AddNumbers list2 = new AddNumbers(); 
        int n=sc.nextInt();
        int m=sc.nextInt();
		for(int i=0;i<n;i++)
			list1.addNode(sc.nextInt());
		for(int i=0;i<m;i++)
			list2.addNode(sc.nextInt());
		Solution sl=new Solution();
		Node list=sl.addTwoNumbers(list1.head,list2.head);
        while(list!=null){
            System.out.print(list.data+" ");
            list=list.next;
        }
        
    }
}    