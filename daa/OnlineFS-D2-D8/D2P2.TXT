/*
There are two lines of electrical outlets, these outlets support different 
voltages range from -100v to 100v. The volatges of the outlets in each line
are arranged in the ascending order as a singly linked lists, list1 and list2.

Your task is to combine these two lists into one list of outlets, and the 
arrangement of outlets should be in the ascending order of their volatges.

NOTE: use singly linked list concept.

Sample Node:
============
class Node{    
	int data;    
	Node next;    
	public Node(int data) {    
		this.data = data;    
		this.next = null;    
	}    
}    


INPUT FORMAT:
-------------
Line-1: space separated integers, voltages of outlets in list-1
Line-2: space separated integers, voltages of outlets in list-2

OUTPUT FORMAT:
--------------
Space separated integers, voltages of outlets in ascending order.


SAMPLE INPUT-1:
---------------
1 3 5 7
2 4 6

SAMPLE OUTPUT-1:
----------------
1 2 3 4 5 6 7



SAMPLE INPUT-2:
---------------
-10 -5 -4 3 5 6
-6 -5 3 4 6 8

SAMPLE OUTPUT-2:
----------------
-10 -6 -5 -5 -4 3 3 4 5 6 6 8


=== testcases ===
case =1
input =1 3 5 7
2 4 6
output ="1 2 3 4 5 6 7"

case =2
input =-10 -5 -4 3 5 6
-6 -5 3 4 6 8
output ="-10 -6 -5 -5 -4 3 3 4 5 6 6 8"

case =3
input =-83 -81 -18 -10 -7 28 30 36 39 52 61 62 68 76 86
-75 -67 -66 -59 -58 -48 -43 -41 -6 -3 -1 2 5 14 17 48 56 71 72 90
output ="-83 -81 -75 -67 -66 -59 -58 -48 -43 -41 -18 -10 -7 -6 -3 -1 2 5 14 17 28 30 36 39 48 52 56 61 62 68 71 72 76 86 90"

case =4
input =-93 -87 -74 -54 -37 -27 -24 -22 -16 -13 -1 0 6 12 28 55 58 64 86 93
-83 -79 -69 -63 -50 -40 -39 -28 -25 -20 -18 -14 -7 -6 3 4 10 30 33 52 59 68 71 80 88
output ="-93 -87 -83 -79 -74 -69 -63 -54 -50 -40 -39 -37 -28 -27 -25 -24 -22 -20 -18 -16 -14 -13 -7 -6 -1 0 3 4 6 10 12 28 30 33 52 55 58 59 64 68 71 80 86 88 93"

case =5
input =-78 -71 -66 -64 -62 -60 -59 -54 -53 -42 -40 -28 -17 -10 -10 -8 4 20 30 38 51 90 93 94 97
-97 -96 -93 -92 -87 -74 -71 -61 -39 -38 -36 -27 -25 -23 -14 -11 -10 0 7 14 26 28 31 34 37 47 61 65 66 71 73 82 88 89 92
output ="-97 -96 -93 -92 -87 -78 -74 -71 -71 -66 -64 -62 -61 -60 -59 -54 -53 -42 -40 -39 -38 -36 -28 -27 -25 -23 -17 -14 -11 -10 -10 -10 -8 0 4 7 14 20 26 28 30 31 34 37 38 47 51 61 65 66 71 73 82 88 89 90 92 93 94 97"

case =6
input =-91 -88 -87 -77 -73 -56 -47 -44 -39 -11 -1 18 19 24 30 38 39 41 57 62 62 62 70 75 75 76 80 86 96 99
-79 -75 -74 -69 -69 -65 -64 -59 -52 -48 -47 -46 -46 -39 -37 -22 -17 -15 -14 -13 -2 6 12 14 23 24 29 31 32 34 36 39 39 46 47 50 53 65 71 74 86 86 87 92 92
output ="-91 -88 -87 -79 -77 -75 -74 -73 -69 -69 -65 -64 -59 -56 -52 -48 -47 -47 -46 -46 -44 -39 -39 -37 -22 -17 -15 -14 -13 -11 -2 -1 6 12 14 18 19 23 24 24 29 30 31 32 34 36 38 39 39 39 41 46 47 50 53 57 62 62 62 65 70 71 74 75 75 76 80 86 86 86 87 92 92 96 99"

case =7
input =-79 -75 -74 -69 -69 -65 -64 -59 -52 -48 -47 -46 -46 -39 -37 -22 -17 -15 -14 -13 -2 6 12 14 23 24 29 31 32 34 36 39 39 46 47 50 53 65 71 74 86 86 87 92 92
-83 -76 -66 -64 -63 -50 -49 -41 -40 -15 -15 -14 -12 -4 -3 2 8 10 10 12 17 21 23 25 25 25 36 37 39 45 47 49 57 57 59 62 62 63 65 68 74 77 79 81 81 89 90 92 97 97
output ="-83 -79 -76 -75 -74 -69 -69 -66 -65 -64 -64 -63 -59 -52 -50 -49 -48 -47 -46 -46 -41 -40 -39 -37 -22 -17 -15 -15 -15 -14 -14 -13 -12 -4 -3 -2 2 6 8 10 10 12 12 14 17 21 23 23 24 25 25 25 29 31 32 34 36 36 37 39 39 39 45 46 47 47 49 50 53 57 57 59 62 62 63 65 65 68 71 74 74 77 79 81 81 86 86 87 89 90 92 92 92 97 97"

case =8
input =-98 -98 -98 -94 -92 -91 -89 -89 -83 -82 -82 -81 -80 -80 -80 -80 -79 -79 -75 -74 -74 -74 -71 -66 -62 -62 -61 -59 -53 -52 -51 -49 -47 -44 -44 -44 -42 -39 -37 -35 -33 -33 -33 -26 -26 -25 -24 -22 -21 -18 -18 -16 -15 -14 -5 -1 3 6 6 6 15 16 23 29 33 34 36 37 38 38 39 44 45 47 52 52 53 53 53 54 54 54 59 60 61 61 61 61 63 64 64 67 68 69 69 76 85 90 96 97
-98 -93 -82 -81 -81 -73 -72 -72 -71 -66 -62 -62 -59 -57 -54 -52 -51 -48 -45 -40 -38 -28 -28 -28 -26 -24 -23 -19 -13 -13 -12 -12 -8 -5 -5 2 6 7 14 16 20 21 23 27 28 29 30 32 36 38 38 39 40 41 46 47 50 52 57 59 63 69 72 73 73 74 74 77 81 82 93 93 95 98 100
output ="-98 -98 -98 -98 -94 -93 -92 -91 -89 -89 -83 -82 -82 -82 -81 -81 -81 -80 -80 -80 -80 -79 -79 -75 -74 -74 -74 -73 -72 -72 -71 -71 -66 -66 -62 -62 -62 -62 -61 -59 -59 -57 -54 -53 -52 -52 -51 -51 -49 -48 -47 -45 -44 -44 -44 -42 -40 -39 -38 -37 -35 -33 -33 -33 -28 -28 -28 -26 -26 -26 -25 -24 -24 -23 -22 -21 -19 -18 -18 -16 -15 -14 -13 -13 -12 -12 -8 -5 -5 -5 -1 2 3 6 6 6 6 7 14 15 16 16 20 21 23 23 27 28 29 29 30 32 33 34 36 36 37 38 38 38 38 39 39 40 41 44 45 46 47 47 50 52 52 52 53 53 53 54 54 54 57 59 59 60 61 61 61 61 63 63 64 64 67 68 69 69 69 72 73 73 74 74 76 77 81 82 85 90 93 93 95 96 97 98 100"

*/

import java.util.*;

class Node{    
	int data;    
	Node next;    
		
	public Node(int data) {    
		this.data = data;    
		this.next = null;    
	}    
}    

class Solution{
	public Node mergeTwoLists(Node l1, Node l2){
			if(l1 == null) return l2;
			if(l2 == null) return l1;
			if(l1.data < l2.data){
				l1.next = mergeTwoLists(l1.next, l2);
				return l1;
			} else{
				l2.next = mergeTwoLists(l1, l2.next);
				return l2;
			}
	}
}
public class MergeLists {    

    public Node head = null;    
    public Node tail = null;    
        
    public void addNode(int data) {    
        Node newNode = new Node(data);    
        if(head == null) {    
            head = newNode;    
            tail = newNode;    
        }    
        else {    
           tail.next = newNode;    
            tail = newNode;    
        }    
    }    
        
    public void display() {    
        Node current = head;    
            
        if(head == null) {    
            System.out.println("List is empty");    
            return;    
        }    
        while(current != null) {    
            System.out.print(current.data + " ");    
            current = current.next;    
        }    
        System.out.println();    
    }    
    public static void main(String[] args) {    
        Scanner sc=new Scanner(System.in);
        MergeLists sList = new MergeLists();    
        MergeLists sList1 = new MergeLists();    
		MergeLists sList2 = new MergeLists();    
		
        String list1[]=sc.nextLine().split(" "); 
        String list2[]=sc.nextLine().split(" "); 
		for(int i=0;i<list1.length;i++)
			sList1.addNode(Integer.parseInt(list1[i]));
		for(int i=0;i<list2.length;i++)
			sList2.addNode(Integer.parseInt(list2[i]));
		Solution sl=new Solution();
		sList.head=sl.mergeTwoLists(sList1.head,sList2.head);
        sList.display();    
    }    
}    